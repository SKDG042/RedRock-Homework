// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package order

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type OrderStatus int64

const (
	OrderStatus_PENDING   OrderStatus = 0
	OrderStatus_CREATED   OrderStatus = 1
	OrderStatus_PAID      OrderStatus = 2
	OrderStatus_FAILED    OrderStatus = 3
	OrderStatus_CANCELLED OrderStatus = 4
)

func (p OrderStatus) String() string {
	switch p {
	case OrderStatus_PENDING:
		return "PENDING"
	case OrderStatus_CREATED:
		return "CREATED"
	case OrderStatus_PAID:
		return "PAID"
	case OrderStatus_FAILED:
		return "FAILED"
	case OrderStatus_CANCELLED:
		return "CANCELLED"
	}
	return "<UNSET>"
}

func OrderStatusFromString(s string) (OrderStatus, error) {
	switch s {
	case "PENDING":
		return OrderStatus_PENDING, nil
	case "CREATED":
		return OrderStatus_CREATED, nil
	case "PAID":
		return OrderStatus_PAID, nil
	case "FAILED":
		return OrderStatus_FAILED, nil
	case "CANCELLED":
		return OrderStatus_CANCELLED, nil
	}
	return OrderStatus(0), fmt.Errorf("not a valid OrderStatus string")
}

func OrderStatusPtr(v OrderStatus) *OrderStatus { return &v }
func (p *OrderStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = OrderStatus(result.Int64)
	return
}

func (p *OrderStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type BaseResponse struct {
	Code int32  `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Msg  string `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
}

func NewBaseResponse() *BaseResponse {
	return &BaseResponse{}
}

func (p *BaseResponse) InitDefault() {
}

func (p *BaseResponse) GetCode() (v int32) {
	return p.Code
}

func (p *BaseResponse) GetMsg() (v string) {
	return p.Msg
}
func (p *BaseResponse) SetCode(val int32) {
	p.Code = val
}
func (p *BaseResponse) SetMsg(val string) {
	p.Msg = val
}

func (p *BaseResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseResponse(%+v)", *p)
}

var fieldIDToName_BaseResponse = map[int16]string{
	1: "code",
	2: "msg",
}

type OrderInfo struct {
	Id          int64       `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	OrderSn     string      `thrift:"orderSn,2" frugal:"2,default,string" json:"orderSn"`
	UserID      int64       `thrift:"userID,3" frugal:"3,default,i64" json:"userID"`
	ActivityID  int64       `thrift:"activityID,4" frugal:"4,default,i64" json:"activityID"`
	ProductID   int64       `thrift:"productID,5" frugal:"5,default,i64" json:"productID"`
	ProductName string      `thrift:"ProductName,6" frugal:"6,default,string" json:"ProductName"`
	Amount      float64     `thrift:"amount,7" frugal:"7,default,double" json:"amount"`
	Status      OrderStatus `thrift:"status,8" frugal:"8,default,OrderStatus" json:"status"`
	CreateTime  int64       `thrift:"createTime,9" frugal:"9,default,i64" json:"createTime"`
	PayTime     int64       `thrift:"payTime,10" frugal:"10,default,i64" json:"payTime"`
	ExpireTime  int64       `thrift:"expireTime,11" frugal:"11,default,i64" json:"expireTime"`
}

func NewOrderInfo() *OrderInfo {
	return &OrderInfo{}
}

func (p *OrderInfo) InitDefault() {
}

func (p *OrderInfo) GetId() (v int64) {
	return p.Id
}

func (p *OrderInfo) GetOrderSn() (v string) {
	return p.OrderSn
}

func (p *OrderInfo) GetUserID() (v int64) {
	return p.UserID
}

func (p *OrderInfo) GetActivityID() (v int64) {
	return p.ActivityID
}

func (p *OrderInfo) GetProductID() (v int64) {
	return p.ProductID
}

func (p *OrderInfo) GetProductName() (v string) {
	return p.ProductName
}

func (p *OrderInfo) GetAmount() (v float64) {
	return p.Amount
}

func (p *OrderInfo) GetStatus() (v OrderStatus) {
	return p.Status
}

func (p *OrderInfo) GetCreateTime() (v int64) {
	return p.CreateTime
}

func (p *OrderInfo) GetPayTime() (v int64) {
	return p.PayTime
}

func (p *OrderInfo) GetExpireTime() (v int64) {
	return p.ExpireTime
}
func (p *OrderInfo) SetId(val int64) {
	p.Id = val
}
func (p *OrderInfo) SetOrderSn(val string) {
	p.OrderSn = val
}
func (p *OrderInfo) SetUserID(val int64) {
	p.UserID = val
}
func (p *OrderInfo) SetActivityID(val int64) {
	p.ActivityID = val
}
func (p *OrderInfo) SetProductID(val int64) {
	p.ProductID = val
}
func (p *OrderInfo) SetProductName(val string) {
	p.ProductName = val
}
func (p *OrderInfo) SetAmount(val float64) {
	p.Amount = val
}
func (p *OrderInfo) SetStatus(val OrderStatus) {
	p.Status = val
}
func (p *OrderInfo) SetCreateTime(val int64) {
	p.CreateTime = val
}
func (p *OrderInfo) SetPayTime(val int64) {
	p.PayTime = val
}
func (p *OrderInfo) SetExpireTime(val int64) {
	p.ExpireTime = val
}

func (p *OrderInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderInfo(%+v)", *p)
}

var fieldIDToName_OrderInfo = map[int16]string{
	1:  "id",
	2:  "orderSn",
	3:  "userID",
	4:  "activityID",
	5:  "productID",
	6:  "ProductName",
	7:  "amount",
	8:  "status",
	9:  "createTime",
	10: "payTime",
	11: "expireTime",
}

type CreateOrderRequest struct {
	UserID     int64 `thrift:"userID,1" frugal:"1,default,i64" json:"userID"`
	ActivityID int64 `thrift:"activityID,2" frugal:"2,default,i64" json:"activityID"`
}

func NewCreateOrderRequest() *CreateOrderRequest {
	return &CreateOrderRequest{}
}

func (p *CreateOrderRequest) InitDefault() {
}

func (p *CreateOrderRequest) GetUserID() (v int64) {
	return p.UserID
}

func (p *CreateOrderRequest) GetActivityID() (v int64) {
	return p.ActivityID
}
func (p *CreateOrderRequest) SetUserID(val int64) {
	p.UserID = val
}
func (p *CreateOrderRequest) SetActivityID(val int64) {
	p.ActivityID = val
}

func (p *CreateOrderRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateOrderRequest(%+v)", *p)
}

var fieldIDToName_CreateOrderRequest = map[int16]string{
	1: "userID",
	2: "activityID",
}

type CreateOrderResponse struct {
	BaseResponse *BaseResponse `thrift:"baseResponse,1" frugal:"1,default,BaseResponse" json:"baseResponse"`
	OrderInfo    *OrderInfo    `thrift:"orderInfo,2" frugal:"2,default,OrderInfo" json:"orderInfo"`
}

func NewCreateOrderResponse() *CreateOrderResponse {
	return &CreateOrderResponse{}
}

func (p *CreateOrderResponse) InitDefault() {
}

var CreateOrderResponse_BaseResponse_DEFAULT *BaseResponse

func (p *CreateOrderResponse) GetBaseResponse() (v *BaseResponse) {
	if !p.IsSetBaseResponse() {
		return CreateOrderResponse_BaseResponse_DEFAULT
	}
	return p.BaseResponse
}

var CreateOrderResponse_OrderInfo_DEFAULT *OrderInfo

func (p *CreateOrderResponse) GetOrderInfo() (v *OrderInfo) {
	if !p.IsSetOrderInfo() {
		return CreateOrderResponse_OrderInfo_DEFAULT
	}
	return p.OrderInfo
}
func (p *CreateOrderResponse) SetBaseResponse(val *BaseResponse) {
	p.BaseResponse = val
}
func (p *CreateOrderResponse) SetOrderInfo(val *OrderInfo) {
	p.OrderInfo = val
}

func (p *CreateOrderResponse) IsSetBaseResponse() bool {
	return p.BaseResponse != nil
}

func (p *CreateOrderResponse) IsSetOrderInfo() bool {
	return p.OrderInfo != nil
}

func (p *CreateOrderResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateOrderResponse(%+v)", *p)
}

var fieldIDToName_CreateOrderResponse = map[int16]string{
	1: "baseResponse",
	2: "orderInfo",
}

type GetOrderRequest struct {
	UserID  int64  `thrift:"userID,1" frugal:"1,default,i64" json:"userID"`
	OrderSn string `thrift:"orderSn,2" frugal:"2,default,string" json:"orderSn"`
}

func NewGetOrderRequest() *GetOrderRequest {
	return &GetOrderRequest{}
}

func (p *GetOrderRequest) InitDefault() {
}

func (p *GetOrderRequest) GetUserID() (v int64) {
	return p.UserID
}

func (p *GetOrderRequest) GetOrderSn() (v string) {
	return p.OrderSn
}
func (p *GetOrderRequest) SetUserID(val int64) {
	p.UserID = val
}
func (p *GetOrderRequest) SetOrderSn(val string) {
	p.OrderSn = val
}

func (p *GetOrderRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetOrderRequest(%+v)", *p)
}

var fieldIDToName_GetOrderRequest = map[int16]string{
	1: "userID",
	2: "orderSn",
}

type GetOrderResponse struct {
	BaseResponse *BaseResponse `thrift:"baseResponse,1" frugal:"1,default,BaseResponse" json:"baseResponse"`
	OrderInfo    *OrderInfo    `thrift:"orderInfo,2" frugal:"2,default,OrderInfo" json:"orderInfo"`
}

func NewGetOrderResponse() *GetOrderResponse {
	return &GetOrderResponse{}
}

func (p *GetOrderResponse) InitDefault() {
}

var GetOrderResponse_BaseResponse_DEFAULT *BaseResponse

func (p *GetOrderResponse) GetBaseResponse() (v *BaseResponse) {
	if !p.IsSetBaseResponse() {
		return GetOrderResponse_BaseResponse_DEFAULT
	}
	return p.BaseResponse
}

var GetOrderResponse_OrderInfo_DEFAULT *OrderInfo

func (p *GetOrderResponse) GetOrderInfo() (v *OrderInfo) {
	if !p.IsSetOrderInfo() {
		return GetOrderResponse_OrderInfo_DEFAULT
	}
	return p.OrderInfo
}
func (p *GetOrderResponse) SetBaseResponse(val *BaseResponse) {
	p.BaseResponse = val
}
func (p *GetOrderResponse) SetOrderInfo(val *OrderInfo) {
	p.OrderInfo = val
}

func (p *GetOrderResponse) IsSetBaseResponse() bool {
	return p.BaseResponse != nil
}

func (p *GetOrderResponse) IsSetOrderInfo() bool {
	return p.OrderInfo != nil
}

func (p *GetOrderResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetOrderResponse(%+v)", *p)
}

var fieldIDToName_GetOrderResponse = map[int16]string{
	1: "baseResponse",
	2: "orderInfo",
}

type ListOrdersRequest struct {
	UserID int64       `thrift:"userID,1" frugal:"1,default,i64" json:"userID"`
	Status OrderStatus `thrift:"status,2" frugal:"2,default,OrderStatus" json:"status"`
}

func NewListOrdersRequest() *ListOrdersRequest {
	return &ListOrdersRequest{

		Status: -1,
	}
}

func (p *ListOrdersRequest) InitDefault() {
	p.Status = -1
}

func (p *ListOrdersRequest) GetUserID() (v int64) {
	return p.UserID
}

func (p *ListOrdersRequest) GetStatus() (v OrderStatus) {
	return p.Status
}
func (p *ListOrdersRequest) SetUserID(val int64) {
	p.UserID = val
}
func (p *ListOrdersRequest) SetStatus(val OrderStatus) {
	p.Status = val
}

func (p *ListOrdersRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListOrdersRequest(%+v)", *p)
}

var fieldIDToName_ListOrdersRequest = map[int16]string{
	1: "userID",
	2: "status",
}

type ListOrdersResponse struct {
	BaseResponse *BaseResponse `thrift:"baseResponse,1" frugal:"1,default,BaseResponse" json:"baseResponse"`
	Orders       []*OrderInfo  `thrift:"orders,2" frugal:"2,default,list<OrderInfo>" json:"orders"`
	Total        int64         `thrift:"total,3" frugal:"3,default,i64" json:"total"`
}

func NewListOrdersResponse() *ListOrdersResponse {
	return &ListOrdersResponse{}
}

func (p *ListOrdersResponse) InitDefault() {
}

var ListOrdersResponse_BaseResponse_DEFAULT *BaseResponse

func (p *ListOrdersResponse) GetBaseResponse() (v *BaseResponse) {
	if !p.IsSetBaseResponse() {
		return ListOrdersResponse_BaseResponse_DEFAULT
	}
	return p.BaseResponse
}

func (p *ListOrdersResponse) GetOrders() (v []*OrderInfo) {
	return p.Orders
}

func (p *ListOrdersResponse) GetTotal() (v int64) {
	return p.Total
}
func (p *ListOrdersResponse) SetBaseResponse(val *BaseResponse) {
	p.BaseResponse = val
}
func (p *ListOrdersResponse) SetOrders(val []*OrderInfo) {
	p.Orders = val
}
func (p *ListOrdersResponse) SetTotal(val int64) {
	p.Total = val
}

func (p *ListOrdersResponse) IsSetBaseResponse() bool {
	return p.BaseResponse != nil
}

func (p *ListOrdersResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListOrdersResponse(%+v)", *p)
}

var fieldIDToName_ListOrdersResponse = map[int16]string{
	1: "baseResponse",
	2: "orders",
	3: "total",
}

type OrderService interface {
	CreateOrder(ctx context.Context, req *CreateOrderRequest) (r *CreateOrderResponse, err error)

	GetOrder(ctx context.Context, req *GetOrderRequest) (r *GetOrderResponse, err error)

	ListOrders(ctx context.Context, req *ListOrdersRequest) (r *ListOrdersResponse, err error)
}

type OrderServiceCreateOrderArgs struct {
	Req *CreateOrderRequest `thrift:"req,1" frugal:"1,default,CreateOrderRequest" json:"req"`
}

func NewOrderServiceCreateOrderArgs() *OrderServiceCreateOrderArgs {
	return &OrderServiceCreateOrderArgs{}
}

func (p *OrderServiceCreateOrderArgs) InitDefault() {
}

var OrderServiceCreateOrderArgs_Req_DEFAULT *CreateOrderRequest

func (p *OrderServiceCreateOrderArgs) GetReq() (v *CreateOrderRequest) {
	if !p.IsSetReq() {
		return OrderServiceCreateOrderArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceCreateOrderArgs) SetReq(val *CreateOrderRequest) {
	p.Req = val
}

func (p *OrderServiceCreateOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceCreateOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceCreateOrderArgs(%+v)", *p)
}

var fieldIDToName_OrderServiceCreateOrderArgs = map[int16]string{
	1: "req",
}

type OrderServiceCreateOrderResult struct {
	Success *CreateOrderResponse `thrift:"success,0,optional" frugal:"0,optional,CreateOrderResponse" json:"success,omitempty"`
}

func NewOrderServiceCreateOrderResult() *OrderServiceCreateOrderResult {
	return &OrderServiceCreateOrderResult{}
}

func (p *OrderServiceCreateOrderResult) InitDefault() {
}

var OrderServiceCreateOrderResult_Success_DEFAULT *CreateOrderResponse

func (p *OrderServiceCreateOrderResult) GetSuccess() (v *CreateOrderResponse) {
	if !p.IsSetSuccess() {
		return OrderServiceCreateOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceCreateOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateOrderResponse)
}

func (p *OrderServiceCreateOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceCreateOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceCreateOrderResult(%+v)", *p)
}

var fieldIDToName_OrderServiceCreateOrderResult = map[int16]string{
	0: "success",
}

type OrderServiceGetOrderArgs struct {
	Req *GetOrderRequest `thrift:"req,1" frugal:"1,default,GetOrderRequest" json:"req"`
}

func NewOrderServiceGetOrderArgs() *OrderServiceGetOrderArgs {
	return &OrderServiceGetOrderArgs{}
}

func (p *OrderServiceGetOrderArgs) InitDefault() {
}

var OrderServiceGetOrderArgs_Req_DEFAULT *GetOrderRequest

func (p *OrderServiceGetOrderArgs) GetReq() (v *GetOrderRequest) {
	if !p.IsSetReq() {
		return OrderServiceGetOrderArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceGetOrderArgs) SetReq(val *GetOrderRequest) {
	p.Req = val
}

func (p *OrderServiceGetOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceGetOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceGetOrderArgs(%+v)", *p)
}

var fieldIDToName_OrderServiceGetOrderArgs = map[int16]string{
	1: "req",
}

type OrderServiceGetOrderResult struct {
	Success *GetOrderResponse `thrift:"success,0,optional" frugal:"0,optional,GetOrderResponse" json:"success,omitempty"`
}

func NewOrderServiceGetOrderResult() *OrderServiceGetOrderResult {
	return &OrderServiceGetOrderResult{}
}

func (p *OrderServiceGetOrderResult) InitDefault() {
}

var OrderServiceGetOrderResult_Success_DEFAULT *GetOrderResponse

func (p *OrderServiceGetOrderResult) GetSuccess() (v *GetOrderResponse) {
	if !p.IsSetSuccess() {
		return OrderServiceGetOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceGetOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetOrderResponse)
}

func (p *OrderServiceGetOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceGetOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceGetOrderResult(%+v)", *p)
}

var fieldIDToName_OrderServiceGetOrderResult = map[int16]string{
	0: "success",
}

type OrderServiceListOrdersArgs struct {
	Req *ListOrdersRequest `thrift:"req,1" frugal:"1,default,ListOrdersRequest" json:"req"`
}

func NewOrderServiceListOrdersArgs() *OrderServiceListOrdersArgs {
	return &OrderServiceListOrdersArgs{}
}

func (p *OrderServiceListOrdersArgs) InitDefault() {
}

var OrderServiceListOrdersArgs_Req_DEFAULT *ListOrdersRequest

func (p *OrderServiceListOrdersArgs) GetReq() (v *ListOrdersRequest) {
	if !p.IsSetReq() {
		return OrderServiceListOrdersArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceListOrdersArgs) SetReq(val *ListOrdersRequest) {
	p.Req = val
}

func (p *OrderServiceListOrdersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceListOrdersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceListOrdersArgs(%+v)", *p)
}

var fieldIDToName_OrderServiceListOrdersArgs = map[int16]string{
	1: "req",
}

type OrderServiceListOrdersResult struct {
	Success *ListOrdersResponse `thrift:"success,0,optional" frugal:"0,optional,ListOrdersResponse" json:"success,omitempty"`
}

func NewOrderServiceListOrdersResult() *OrderServiceListOrdersResult {
	return &OrderServiceListOrdersResult{}
}

func (p *OrderServiceListOrdersResult) InitDefault() {
}

var OrderServiceListOrdersResult_Success_DEFAULT *ListOrdersResponse

func (p *OrderServiceListOrdersResult) GetSuccess() (v *ListOrdersResponse) {
	if !p.IsSetSuccess() {
		return OrderServiceListOrdersResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceListOrdersResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListOrdersResponse)
}

func (p *OrderServiceListOrdersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceListOrdersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceListOrdersResult(%+v)", *p)
}

var fieldIDToName_OrderServiceListOrdersResult = map[int16]string{
	0: "success",
}
