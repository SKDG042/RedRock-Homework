// Code generated by Kitex v0.13.1. DO NOT EDIT.

package activityservice

import (
	activity "Redrock/seckill/kitex_gen/activity"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateActivity": kitex.NewMethodInfo(
		createActivityHandler,
		newActivityServiceCreateActivityArgs,
		newActivityServiceCreateActivityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetActivityList": kitex.NewMethodInfo(
		getActivityListHandler,
		newActivityServiceGetActivityListArgs,
		newActivityServiceGetActivityListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetActivity": kitex.NewMethodInfo(
		getActivityHandler,
		newActivityServiceGetActivityArgs,
		newActivityServiceGetActivityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	activityServiceServiceInfo                = NewServiceInfo()
	activityServiceServiceInfoForClient       = NewServiceInfoForClient()
	activityServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return activityServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return activityServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return activityServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ActivityService"
	handlerType := (*activity.ActivityService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "activity",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func createActivityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*activity.ActivityServiceCreateActivityArgs)
	realResult := result.(*activity.ActivityServiceCreateActivityResult)
	success, err := handler.(activity.ActivityService).CreateActivity(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newActivityServiceCreateActivityArgs() interface{} {
	return activity.NewActivityServiceCreateActivityArgs()
}

func newActivityServiceCreateActivityResult() interface{} {
	return activity.NewActivityServiceCreateActivityResult()
}

func getActivityListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*activity.ActivityServiceGetActivityListArgs)
	realResult := result.(*activity.ActivityServiceGetActivityListResult)
	success, err := handler.(activity.ActivityService).GetActivityList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newActivityServiceGetActivityListArgs() interface{} {
	return activity.NewActivityServiceGetActivityListArgs()
}

func newActivityServiceGetActivityListResult() interface{} {
	return activity.NewActivityServiceGetActivityListResult()
}

func getActivityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*activity.ActivityServiceGetActivityArgs)
	realResult := result.(*activity.ActivityServiceGetActivityResult)
	success, err := handler.(activity.ActivityService).GetActivity(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newActivityServiceGetActivityArgs() interface{} {
	return activity.NewActivityServiceGetActivityArgs()
}

func newActivityServiceGetActivityResult() interface{} {
	return activity.NewActivityServiceGetActivityResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateActivity(ctx context.Context, req *activity.CreateActivityRequest) (r *activity.CreateActivityResponse, err error) {
	var _args activity.ActivityServiceCreateActivityArgs
	_args.Req = req
	var _result activity.ActivityServiceCreateActivityResult
	if err = p.c.Call(ctx, "CreateActivity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetActivityList(ctx context.Context, req *activity.GetActivityListRequest) (r *activity.GetActivityListResponse, err error) {
	var _args activity.ActivityServiceGetActivityListArgs
	_args.Req = req
	var _result activity.ActivityServiceGetActivityListResult
	if err = p.c.Call(ctx, "GetActivityList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetActivity(ctx context.Context, req *activity.GetActivityRequest) (r *activity.GetActivityResponse, err error) {
	var _args activity.ActivityServiceGetActivityArgs
	_args.Req = req
	var _result activity.ActivityServiceGetActivityResult
	if err = p.c.Call(ctx, "GetActivity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
