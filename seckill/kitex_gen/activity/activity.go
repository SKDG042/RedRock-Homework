// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package activity

import (
	"context"
	"fmt"
)

type BaseResponse struct {
	Code int32  `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Msg  string `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
}

func NewBaseResponse() *BaseResponse {
	return &BaseResponse{}
}

func (p *BaseResponse) InitDefault() {
}

func (p *BaseResponse) GetCode() (v int32) {
	return p.Code
}

func (p *BaseResponse) GetMsg() (v string) {
	return p.Msg
}
func (p *BaseResponse) SetCode(val int32) {
	p.Code = val
}
func (p *BaseResponse) SetMsg(val string) {
	p.Msg = val
}

func (p *BaseResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseResponse(%+v)", *p)
}

var fieldIDToName_BaseResponse = map[int16]string{
	1: "code",
	2: "msg",
}

type ActivityInfo struct {
	Id             int64   `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	Name           string  `thrift:"name,2" frugal:"2,default,string" json:"name"`
	ProductId      int64   `thrift:"productId,3" frugal:"3,default,i64" json:"productId"`
	ProductName    string  `thrift:"productName,4" frugal:"4,default,string" json:"productName"`
	OriginalPrice  float64 `thrift:"originalPrice,5" frugal:"5,default,double" json:"originalPrice"`
	SeckillPrice   float64 `thrift:"seckillPrice,6" frugal:"6,default,double" json:"seckillPrice"`
	StartTime      int64   `thrift:"startTime,7" frugal:"7,default,i64" json:"startTime"`
	EndTime        int64   `thrift:"endTime,8" frugal:"8,default,i64" json:"endTime"`
	TotalStock     int64   `thrift:"totalStock,9" frugal:"9,default,i64" json:"totalStock"`
	AvailableStock int64   `thrift:"availableStock,10" frugal:"10,default,i64" json:"availableStock"`
	IsAvailable    bool    `thrift:"isAvailable,11" frugal:"11,default,bool" json:"isAvailable"`
}

func NewActivityInfo() *ActivityInfo {
	return &ActivityInfo{}
}

func (p *ActivityInfo) InitDefault() {
}

func (p *ActivityInfo) GetId() (v int64) {
	return p.Id
}

func (p *ActivityInfo) GetName() (v string) {
	return p.Name
}

func (p *ActivityInfo) GetProductId() (v int64) {
	return p.ProductId
}

func (p *ActivityInfo) GetProductName() (v string) {
	return p.ProductName
}

func (p *ActivityInfo) GetOriginalPrice() (v float64) {
	return p.OriginalPrice
}

func (p *ActivityInfo) GetSeckillPrice() (v float64) {
	return p.SeckillPrice
}

func (p *ActivityInfo) GetStartTime() (v int64) {
	return p.StartTime
}

func (p *ActivityInfo) GetEndTime() (v int64) {
	return p.EndTime
}

func (p *ActivityInfo) GetTotalStock() (v int64) {
	return p.TotalStock
}

func (p *ActivityInfo) GetAvailableStock() (v int64) {
	return p.AvailableStock
}

func (p *ActivityInfo) GetIsAvailable() (v bool) {
	return p.IsAvailable
}
func (p *ActivityInfo) SetId(val int64) {
	p.Id = val
}
func (p *ActivityInfo) SetName(val string) {
	p.Name = val
}
func (p *ActivityInfo) SetProductId(val int64) {
	p.ProductId = val
}
func (p *ActivityInfo) SetProductName(val string) {
	p.ProductName = val
}
func (p *ActivityInfo) SetOriginalPrice(val float64) {
	p.OriginalPrice = val
}
func (p *ActivityInfo) SetSeckillPrice(val float64) {
	p.SeckillPrice = val
}
func (p *ActivityInfo) SetStartTime(val int64) {
	p.StartTime = val
}
func (p *ActivityInfo) SetEndTime(val int64) {
	p.EndTime = val
}
func (p *ActivityInfo) SetTotalStock(val int64) {
	p.TotalStock = val
}
func (p *ActivityInfo) SetAvailableStock(val int64) {
	p.AvailableStock = val
}
func (p *ActivityInfo) SetIsAvailable(val bool) {
	p.IsAvailable = val
}

func (p *ActivityInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ActivityInfo(%+v)", *p)
}

var fieldIDToName_ActivityInfo = map[int16]string{
	1:  "id",
	2:  "name",
	3:  "productId",
	4:  "productName",
	5:  "originalPrice",
	6:  "seckillPrice",
	7:  "startTime",
	8:  "endTime",
	9:  "totalStock",
	10: "availableStock",
	11: "isAvailable",
}

type CreateActivityRequest struct {
	Name         string  `thrift:"name,1" frugal:"1,default,string" json:"name"`
	ProductID    int64   `thrift:"productID,2" frugal:"2,default,i64" json:"productID"`
	SeckillPrice float64 `thrift:"seckillPrice,3" frugal:"3,default,double" json:"seckillPrice"`
	StartTime    int64   `thrift:"startTime,4" frugal:"4,default,i64" json:"startTime"`
	EndTime      int64   `thrift:"endTime,5" frugal:"5,default,i64" json:"endTime"`
	TotalStock   int64   `thrift:"totalStock,6" frugal:"6,default,i64" json:"totalStock"`
}

func NewCreateActivityRequest() *CreateActivityRequest {
	return &CreateActivityRequest{}
}

func (p *CreateActivityRequest) InitDefault() {
}

func (p *CreateActivityRequest) GetName() (v string) {
	return p.Name
}

func (p *CreateActivityRequest) GetProductID() (v int64) {
	return p.ProductID
}

func (p *CreateActivityRequest) GetSeckillPrice() (v float64) {
	return p.SeckillPrice
}

func (p *CreateActivityRequest) GetStartTime() (v int64) {
	return p.StartTime
}

func (p *CreateActivityRequest) GetEndTime() (v int64) {
	return p.EndTime
}

func (p *CreateActivityRequest) GetTotalStock() (v int64) {
	return p.TotalStock
}
func (p *CreateActivityRequest) SetName(val string) {
	p.Name = val
}
func (p *CreateActivityRequest) SetProductID(val int64) {
	p.ProductID = val
}
func (p *CreateActivityRequest) SetSeckillPrice(val float64) {
	p.SeckillPrice = val
}
func (p *CreateActivityRequest) SetStartTime(val int64) {
	p.StartTime = val
}
func (p *CreateActivityRequest) SetEndTime(val int64) {
	p.EndTime = val
}
func (p *CreateActivityRequest) SetTotalStock(val int64) {
	p.TotalStock = val
}

func (p *CreateActivityRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateActivityRequest(%+v)", *p)
}

var fieldIDToName_CreateActivityRequest = map[int16]string{
	1: "name",
	2: "productID",
	3: "seckillPrice",
	4: "startTime",
	5: "endTime",
	6: "totalStock",
}

type CreateActivityResponse struct {
	BaseResponse *BaseResponse `thrift:"baseResponse,1" frugal:"1,default,BaseResponse" json:"baseResponse"`
	ActivityID   int64         `thrift:"activityID,2" frugal:"2,default,i64" json:"activityID"`
}

func NewCreateActivityResponse() *CreateActivityResponse {
	return &CreateActivityResponse{}
}

func (p *CreateActivityResponse) InitDefault() {
}

var CreateActivityResponse_BaseResponse_DEFAULT *BaseResponse

func (p *CreateActivityResponse) GetBaseResponse() (v *BaseResponse) {
	if !p.IsSetBaseResponse() {
		return CreateActivityResponse_BaseResponse_DEFAULT
	}
	return p.BaseResponse
}

func (p *CreateActivityResponse) GetActivityID() (v int64) {
	return p.ActivityID
}
func (p *CreateActivityResponse) SetBaseResponse(val *BaseResponse) {
	p.BaseResponse = val
}
func (p *CreateActivityResponse) SetActivityID(val int64) {
	p.ActivityID = val
}

func (p *CreateActivityResponse) IsSetBaseResponse() bool {
	return p.BaseResponse != nil
}

func (p *CreateActivityResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateActivityResponse(%+v)", *p)
}

var fieldIDToName_CreateActivityResponse = map[int16]string{
	1: "baseResponse",
	2: "activityID",
}

type GetActivityListRequest struct {
}

func NewGetActivityListRequest() *GetActivityListRequest {
	return &GetActivityListRequest{}
}

func (p *GetActivityListRequest) InitDefault() {
}

func (p *GetActivityListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetActivityListRequest(%+v)", *p)
}

var fieldIDToName_GetActivityListRequest = map[int16]string{}

type GetActivityListResponse struct {
	BaseResponse *BaseResponse   `thrift:"baseResponse,1" frugal:"1,default,BaseResponse" json:"baseResponse"`
	Activities   []*ActivityInfo `thrift:"activities,2" frugal:"2,default,list<ActivityInfo>" json:"activities"`
	Total        int64           `thrift:"total,3" frugal:"3,default,i64" json:"total"`
}

func NewGetActivityListResponse() *GetActivityListResponse {
	return &GetActivityListResponse{}
}

func (p *GetActivityListResponse) InitDefault() {
}

var GetActivityListResponse_BaseResponse_DEFAULT *BaseResponse

func (p *GetActivityListResponse) GetBaseResponse() (v *BaseResponse) {
	if !p.IsSetBaseResponse() {
		return GetActivityListResponse_BaseResponse_DEFAULT
	}
	return p.BaseResponse
}

func (p *GetActivityListResponse) GetActivities() (v []*ActivityInfo) {
	return p.Activities
}

func (p *GetActivityListResponse) GetTotal() (v int64) {
	return p.Total
}
func (p *GetActivityListResponse) SetBaseResponse(val *BaseResponse) {
	p.BaseResponse = val
}
func (p *GetActivityListResponse) SetActivities(val []*ActivityInfo) {
	p.Activities = val
}
func (p *GetActivityListResponse) SetTotal(val int64) {
	p.Total = val
}

func (p *GetActivityListResponse) IsSetBaseResponse() bool {
	return p.BaseResponse != nil
}

func (p *GetActivityListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetActivityListResponse(%+v)", *p)
}

var fieldIDToName_GetActivityListResponse = map[int16]string{
	1: "baseResponse",
	2: "activities",
	3: "total",
}

type GetActivityRequest struct {
	ActivityID int64 `thrift:"activityID,1" frugal:"1,default,i64" json:"activityID"`
}

func NewGetActivityRequest() *GetActivityRequest {
	return &GetActivityRequest{}
}

func (p *GetActivityRequest) InitDefault() {
}

func (p *GetActivityRequest) GetActivityID() (v int64) {
	return p.ActivityID
}
func (p *GetActivityRequest) SetActivityID(val int64) {
	p.ActivityID = val
}

func (p *GetActivityRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetActivityRequest(%+v)", *p)
}

var fieldIDToName_GetActivityRequest = map[int16]string{
	1: "activityID",
}

type GetActivityResponse struct {
	BaseResponse *BaseResponse `thrift:"baseResponse,1" frugal:"1,default,BaseResponse" json:"baseResponse"`
	Activity     *ActivityInfo `thrift:"activity,2" frugal:"2,default,ActivityInfo" json:"activity"`
}

func NewGetActivityResponse() *GetActivityResponse {
	return &GetActivityResponse{}
}

func (p *GetActivityResponse) InitDefault() {
}

var GetActivityResponse_BaseResponse_DEFAULT *BaseResponse

func (p *GetActivityResponse) GetBaseResponse() (v *BaseResponse) {
	if !p.IsSetBaseResponse() {
		return GetActivityResponse_BaseResponse_DEFAULT
	}
	return p.BaseResponse
}

var GetActivityResponse_Activity_DEFAULT *ActivityInfo

func (p *GetActivityResponse) GetActivity() (v *ActivityInfo) {
	if !p.IsSetActivity() {
		return GetActivityResponse_Activity_DEFAULT
	}
	return p.Activity
}
func (p *GetActivityResponse) SetBaseResponse(val *BaseResponse) {
	p.BaseResponse = val
}
func (p *GetActivityResponse) SetActivity(val *ActivityInfo) {
	p.Activity = val
}

func (p *GetActivityResponse) IsSetBaseResponse() bool {
	return p.BaseResponse != nil
}

func (p *GetActivityResponse) IsSetActivity() bool {
	return p.Activity != nil
}

func (p *GetActivityResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetActivityResponse(%+v)", *p)
}

var fieldIDToName_GetActivityResponse = map[int16]string{
	1: "baseResponse",
	2: "activity",
}

type DeductStockRequest struct {
	ActivityID int64 `thrift:"activityID,1" frugal:"1,default,i64" json:"activityID"`
	UserID     int64 `thrift:"userID,2" frugal:"2,default,i64" json:"userID"`
	Count      int64 `thrift:"count,3" frugal:"3,default,i64" json:"count"`
}

func NewDeductStockRequest() *DeductStockRequest {
	return &DeductStockRequest{

		Count: 1,
	}
}

func (p *DeductStockRequest) InitDefault() {
	p.Count = 1
}

func (p *DeductStockRequest) GetActivityID() (v int64) {
	return p.ActivityID
}

func (p *DeductStockRequest) GetUserID() (v int64) {
	return p.UserID
}

func (p *DeductStockRequest) GetCount() (v int64) {
	return p.Count
}
func (p *DeductStockRequest) SetActivityID(val int64) {
	p.ActivityID = val
}
func (p *DeductStockRequest) SetUserID(val int64) {
	p.UserID = val
}
func (p *DeductStockRequest) SetCount(val int64) {
	p.Count = val
}

func (p *DeductStockRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeductStockRequest(%+v)", *p)
}

var fieldIDToName_DeductStockRequest = map[int16]string{
	1: "activityID",
	2: "userID",
	3: "count",
}

type DeductStockResponse struct {
	BaseResponse *BaseResponse `thrift:"baseResponse,1" frugal:"1,default,BaseResponse" json:"baseResponse"`
	Success      bool          `thrift:"success,2" frugal:"2,default,bool" json:"success"`
}

func NewDeductStockResponse() *DeductStockResponse {
	return &DeductStockResponse{}
}

func (p *DeductStockResponse) InitDefault() {
}

var DeductStockResponse_BaseResponse_DEFAULT *BaseResponse

func (p *DeductStockResponse) GetBaseResponse() (v *BaseResponse) {
	if !p.IsSetBaseResponse() {
		return DeductStockResponse_BaseResponse_DEFAULT
	}
	return p.BaseResponse
}

func (p *DeductStockResponse) GetSuccess() (v bool) {
	return p.Success
}
func (p *DeductStockResponse) SetBaseResponse(val *BaseResponse) {
	p.BaseResponse = val
}
func (p *DeductStockResponse) SetSuccess(val bool) {
	p.Success = val
}

func (p *DeductStockResponse) IsSetBaseResponse() bool {
	return p.BaseResponse != nil
}

func (p *DeductStockResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeductStockResponse(%+v)", *p)
}

var fieldIDToName_DeductStockResponse = map[int16]string{
	1: "baseResponse",
	2: "success",
}

type ActivityService interface {
	CreateActivity(ctx context.Context, req *CreateActivityRequest) (r *CreateActivityResponse, err error)

	GetActivityList(ctx context.Context, req *GetActivityListRequest) (r *GetActivityListResponse, err error)

	GetActivity(ctx context.Context, req *GetActivityRequest) (r *GetActivityResponse, err error)
}

type ActivityServiceCreateActivityArgs struct {
	Req *CreateActivityRequest `thrift:"req,1" frugal:"1,default,CreateActivityRequest" json:"req"`
}

func NewActivityServiceCreateActivityArgs() *ActivityServiceCreateActivityArgs {
	return &ActivityServiceCreateActivityArgs{}
}

func (p *ActivityServiceCreateActivityArgs) InitDefault() {
}

var ActivityServiceCreateActivityArgs_Req_DEFAULT *CreateActivityRequest

func (p *ActivityServiceCreateActivityArgs) GetReq() (v *CreateActivityRequest) {
	if !p.IsSetReq() {
		return ActivityServiceCreateActivityArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ActivityServiceCreateActivityArgs) SetReq(val *CreateActivityRequest) {
	p.Req = val
}

func (p *ActivityServiceCreateActivityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ActivityServiceCreateActivityArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ActivityServiceCreateActivityArgs(%+v)", *p)
}

var fieldIDToName_ActivityServiceCreateActivityArgs = map[int16]string{
	1: "req",
}

type ActivityServiceCreateActivityResult struct {
	Success *CreateActivityResponse `thrift:"success,0,optional" frugal:"0,optional,CreateActivityResponse" json:"success,omitempty"`
}

func NewActivityServiceCreateActivityResult() *ActivityServiceCreateActivityResult {
	return &ActivityServiceCreateActivityResult{}
}

func (p *ActivityServiceCreateActivityResult) InitDefault() {
}

var ActivityServiceCreateActivityResult_Success_DEFAULT *CreateActivityResponse

func (p *ActivityServiceCreateActivityResult) GetSuccess() (v *CreateActivityResponse) {
	if !p.IsSetSuccess() {
		return ActivityServiceCreateActivityResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ActivityServiceCreateActivityResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateActivityResponse)
}

func (p *ActivityServiceCreateActivityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ActivityServiceCreateActivityResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ActivityServiceCreateActivityResult(%+v)", *p)
}

var fieldIDToName_ActivityServiceCreateActivityResult = map[int16]string{
	0: "success",
}

type ActivityServiceGetActivityListArgs struct {
	Req *GetActivityListRequest `thrift:"req,1" frugal:"1,default,GetActivityListRequest" json:"req"`
}

func NewActivityServiceGetActivityListArgs() *ActivityServiceGetActivityListArgs {
	return &ActivityServiceGetActivityListArgs{}
}

func (p *ActivityServiceGetActivityListArgs) InitDefault() {
}

var ActivityServiceGetActivityListArgs_Req_DEFAULT *GetActivityListRequest

func (p *ActivityServiceGetActivityListArgs) GetReq() (v *GetActivityListRequest) {
	if !p.IsSetReq() {
		return ActivityServiceGetActivityListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ActivityServiceGetActivityListArgs) SetReq(val *GetActivityListRequest) {
	p.Req = val
}

func (p *ActivityServiceGetActivityListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ActivityServiceGetActivityListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ActivityServiceGetActivityListArgs(%+v)", *p)
}

var fieldIDToName_ActivityServiceGetActivityListArgs = map[int16]string{
	1: "req",
}

type ActivityServiceGetActivityListResult struct {
	Success *GetActivityListResponse `thrift:"success,0,optional" frugal:"0,optional,GetActivityListResponse" json:"success,omitempty"`
}

func NewActivityServiceGetActivityListResult() *ActivityServiceGetActivityListResult {
	return &ActivityServiceGetActivityListResult{}
}

func (p *ActivityServiceGetActivityListResult) InitDefault() {
}

var ActivityServiceGetActivityListResult_Success_DEFAULT *GetActivityListResponse

func (p *ActivityServiceGetActivityListResult) GetSuccess() (v *GetActivityListResponse) {
	if !p.IsSetSuccess() {
		return ActivityServiceGetActivityListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ActivityServiceGetActivityListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetActivityListResponse)
}

func (p *ActivityServiceGetActivityListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ActivityServiceGetActivityListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ActivityServiceGetActivityListResult(%+v)", *p)
}

var fieldIDToName_ActivityServiceGetActivityListResult = map[int16]string{
	0: "success",
}

type ActivityServiceGetActivityArgs struct {
	Req *GetActivityRequest `thrift:"req,1" frugal:"1,default,GetActivityRequest" json:"req"`
}

func NewActivityServiceGetActivityArgs() *ActivityServiceGetActivityArgs {
	return &ActivityServiceGetActivityArgs{}
}

func (p *ActivityServiceGetActivityArgs) InitDefault() {
}

var ActivityServiceGetActivityArgs_Req_DEFAULT *GetActivityRequest

func (p *ActivityServiceGetActivityArgs) GetReq() (v *GetActivityRequest) {
	if !p.IsSetReq() {
		return ActivityServiceGetActivityArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ActivityServiceGetActivityArgs) SetReq(val *GetActivityRequest) {
	p.Req = val
}

func (p *ActivityServiceGetActivityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ActivityServiceGetActivityArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ActivityServiceGetActivityArgs(%+v)", *p)
}

var fieldIDToName_ActivityServiceGetActivityArgs = map[int16]string{
	1: "req",
}

type ActivityServiceGetActivityResult struct {
	Success *GetActivityResponse `thrift:"success,0,optional" frugal:"0,optional,GetActivityResponse" json:"success,omitempty"`
}

func NewActivityServiceGetActivityResult() *ActivityServiceGetActivityResult {
	return &ActivityServiceGetActivityResult{}
}

func (p *ActivityServiceGetActivityResult) InitDefault() {
}

var ActivityServiceGetActivityResult_Success_DEFAULT *GetActivityResponse

func (p *ActivityServiceGetActivityResult) GetSuccess() (v *GetActivityResponse) {
	if !p.IsSetSuccess() {
		return ActivityServiceGetActivityResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ActivityServiceGetActivityResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetActivityResponse)
}

func (p *ActivityServiceGetActivityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ActivityServiceGetActivityResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ActivityServiceGetActivityResult(%+v)", *p)
}

var fieldIDToName_ActivityServiceGetActivityResult = map[int16]string{
	0: "success",
}

type InternalActivityService interface {
	DeductStock(ctx context.Context, req *DeductStockRequest) (r *DeductStockResponse, err error)
}

type InternalActivityServiceDeductStockArgs struct {
	Req *DeductStockRequest `thrift:"req,1" frugal:"1,default,DeductStockRequest" json:"req"`
}

func NewInternalActivityServiceDeductStockArgs() *InternalActivityServiceDeductStockArgs {
	return &InternalActivityServiceDeductStockArgs{}
}

func (p *InternalActivityServiceDeductStockArgs) InitDefault() {
}

var InternalActivityServiceDeductStockArgs_Req_DEFAULT *DeductStockRequest

func (p *InternalActivityServiceDeductStockArgs) GetReq() (v *DeductStockRequest) {
	if !p.IsSetReq() {
		return InternalActivityServiceDeductStockArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InternalActivityServiceDeductStockArgs) SetReq(val *DeductStockRequest) {
	p.Req = val
}

func (p *InternalActivityServiceDeductStockArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InternalActivityServiceDeductStockArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InternalActivityServiceDeductStockArgs(%+v)", *p)
}

var fieldIDToName_InternalActivityServiceDeductStockArgs = map[int16]string{
	1: "req",
}

type InternalActivityServiceDeductStockResult struct {
	Success *DeductStockResponse `thrift:"success,0,optional" frugal:"0,optional,DeductStockResponse" json:"success,omitempty"`
}

func NewInternalActivityServiceDeductStockResult() *InternalActivityServiceDeductStockResult {
	return &InternalActivityServiceDeductStockResult{}
}

func (p *InternalActivityServiceDeductStockResult) InitDefault() {
}

var InternalActivityServiceDeductStockResult_Success_DEFAULT *DeductStockResponse

func (p *InternalActivityServiceDeductStockResult) GetSuccess() (v *DeductStockResponse) {
	if !p.IsSetSuccess() {
		return InternalActivityServiceDeductStockResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InternalActivityServiceDeductStockResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeductStockResponse)
}

func (p *InternalActivityServiceDeductStockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InternalActivityServiceDeductStockResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InternalActivityServiceDeductStockResult(%+v)", *p)
}

var fieldIDToName_InternalActivityServiceDeductStockResult = map[int16]string{
	0: "success",
}
